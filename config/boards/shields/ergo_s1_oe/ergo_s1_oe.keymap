/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Global settings

#define TAPPING_TERM   175
#define QUICK_TAP_TERM 50

// Layout enums

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define NAV     3
#define UMLAUT  4

// Layer Tap 
// The "layer-tap" behavior enables a layer when a key is held, and outputs a keypress when the key
// is only tapped for a short time.

&lt {
    tapping-term-ms = <TAPPING_TERM>;
    flavor = "tap-preferred";
    quick-tap-ms = <QUICK_TAP_TERM>;
};

/ {
    behaviors {
        // homerow mods (gqt: global-quick-tap)

        hm: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "home-row-mods";
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP_TERM>;
            flavor = "tap-preferred";
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
        lst: lst {
            compatible = "zmk,behavior-hold-tap";
            label = "left-shift-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <18 46 7 6 8 9 10 11 23 35 51 22 34 50 65 64 63 62 47 48 49 33 32 31 30 19 20 21 67 59 44 45 60 60 61 66 58 43 42 57 56>;
        };
        rst: rst {
            compatible = "zmk,behavior-hold-tap";
            label = "right-shift-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <56 57 43 42 58 66 44 59 67 60 61 45 0 24 12 36 1 13 25 37 52 38 26 14 2 3 15 27 39 54 53 55 40 28 16 4 5 17 29 41>;
        };
    };

    /* activate NAV layer when and only when LOWER + RAISE are pressed */

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <NAV>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // PBU Notes: map right ALT to LALT on default layer to not use it as ALTGR

        default_layer {
            bindings = <
&kp GRAVE       &kp N1      &kp N2      &kp N3       &kp N4        &kp N5                                             &kp N6      &kp N7        &kp N8       &kp N9      &kp N0      &kp MINUS
&kp TAB         &kp Q       &kp W       &kp F        &kp P         &kp B                                              &kp J       &kp L         &kp U        &kp Y       &kp SEMI    &kp BSPC
&lt UMLAUT ESC  &hm LGUI A  &hm LALT R  &hm LCTRL S  &lst LSHFT T  &kp G                                              &kp M       &rst RSHFT N  &hm RCTRL E  &hm LALT I  &hm RGUI O  &lt UMLAUT SQT
&kp LSHIFT      &kp Z       &kp X       &kp C        &kp D         &kp V   &kp LCTRL  &kp LALT  &kp CAPS   &kp RCTRL  &kp K       &kp H         &kp COMMA    &kp PERIOD  &kp SLASH   &hm RSHFT MINUS
                &kp GRAVE   &kp BSLH    &kp LEFT     &kp RIGHT     &mo 1   &kp ENTER  &kp HOME  &kp PG_UP  &kp SPACE  &lt 2 BSPC  &kp UP        &kp DOWN     &kp LBKT    &kp RBKT
                                                                                      &kp END   &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
&bt BT_CLR  &kp F1     &kp F2     &kp F3    &kp F4    &kp F5                                     &kp F6     &kp F7    &kp F8    &kp F9     &kp F10   &kp F11
&kp GRAVE   &kp N1     &kp N2     &kp N3    &kp N4    &kp N5                                     &kp N6     &kp N7    &kp N8    &kp N9     &kp N0    &kp F12
&trans      &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT                                  &kp CARET  &kp AMPS  &kp STAR  &kp LPAR   &kp RPAR  &kp PIPE
&trans      &kp EQUAL  &kp MINUS  &kp PLUS  &kp LBRC  &kp RBRC   &trans  &trans  &trans  &trans  &kp LBKT   &kp RBKT  &kp SEMI  &kp COLON  &kp BSLH  &kp RSHFT
            &trans     &trans     &trans    &trans    &trans     &trans  &trans  &trans  &trans  &trans     &trans    &trans    &trans     &trans
                                                                         &trans  &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &kp C_PREV  &kp K_PP   &kp C_NEXT  &trans       &trans                                    &trans    &trans        &trans  &kp PSCRN      &kp SLCK  &kp PAUSE_BREAK
&trans  &kp INS     &kp PSCRN  &kp K_APP   &trans       &trans                                    &trans    &kp LC(LEFT)  &trans  &kp LC(RIGHT)  &trans    &kp BSPC
&trans  &trans      &trans     &trans      &trans       &kp CAPS                                  &kp LEFT  &kp DOWN      &kp UP  &kp RIGHT      &kp DEL   &kp PG_UP
&trans  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &trans    &trans  &trans  &trans  &trans  &trans    &kp HOME      &trans  &kp END        &trans    &kp PG_DN
        &trans      &trans     &trans      &trans       &trans    &trans  &trans  &trans  &trans  &trans    &trans        &trans  &trans         &trans
                                                                          &trans  &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                  &trans          &trans          &trans        &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                  &trans          &mkp LCLK       &trans        &mkp RCLK        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans        &trans           &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans        &trans           &trans
                                                        &trans  &trans
            >;
        };

        umlaut_layer {
            bindings = <
&trans  &trans     &trans  &trans     &trans  &trans                                  &trans  &trans  &trans      &trans    &trans     &trans
&trans  &trans     &trans  &trans     &trans  &trans                                  &trans  &trans  &kp RA(Y)   &trans    &trans     &trans
&trans  &kp RA(Q)  &trans  &kp RA(S)  &trans  &trans                                  &trans  &trans  &kp RA(N5)  &kp RALT  &kp RA(P)  &trans
&trans  &trans     &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans     &trans
        &trans     &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans
                                                              &trans  &trans
            >;
        };

        /*
    TEMPLATE {
      bindings = <
//╭──────────────┬──────────┬──────────┬──────────┬─────────┬─────────╮                                                               ╭─────────┬──────────┬──────────┬──────────┬─────────┬──────────╮
//│              │          │          │          │         │         │                                                               │         │          │          │          │         │          │
    &trans        &trans    &trans    &trans    &trans   &trans                                                                   &trans   &trans    &trans    &trans    &trans   &trans 
//├──────────────┬──────────┼──────────┼──────────┼─────────┼─────────┤                                                               ├─────────┼──────────┼──────────┼──────────┼─────────┼──────────┤
//│              │          │          │          │         │         │                                                               │         │          │          │          │         │          │
    &trans        &trans    &trans    &trans    &trans   &trans                                                                   &trans   &trans    &trans    &trans    &trans   &trans 
//├──────────────┬──────────┼──────────┼──────────┼─────────┼─────────┤                                                               ├─────────┼──────────┼──────────┼──────────┼─────────┼──────────┤
//│              │          │          │          │         │         │                                                               │         │          │          │          │         │          │
    &trans        &trans    &trans    &trans    &trans   &trans                                                                   &trans   &trans    &trans    &trans    &trans   &trans 
//├──────────────┬──────────┼──────────┼──────────┼─────────┼─────────┤          ╭─────────┬────────╮  ╭─────────┬─────────╮          ├─────────┼──────────┼──────────┼──────────┼─────────┼──────────┤
//│              │          │          │          │         │         │                                                               │         │          │          │          │         │          │
    &trans        &trans    &trans    &trans    &trans   &trans              &trans  &trans      &trans   &trans              &trans   &trans    &trans    &trans    &trans   &trans 
//╰──────────────┬──────────┼──────────┼──────────┼─────────┼─────────╯╭─────────┼─────────┼────────┤  ├─────────┼─────────┼─────────╮╰─────────┼──────────┼──────────┼──────────┼─────────┼──────────╯
                   &trans    &trans    &trans    &trans              &trans   &trans  &trans      &trans   &trans   &trans              &trans    &trans    &trans    &trans
//               ╰──────────┴──────────┴──────────┴─────────╯          |         |         ├────────┤  ├─────────┤         |         |          ╰──────────┴──────────┴──────────┴─────────╯
                                                                                            &trans      &trans 
//                                                                     ╰─────────┴─────────┴────────╯  ╰─────────┴─────────┴─────────╯
      >;
    };
*/
    };
};

